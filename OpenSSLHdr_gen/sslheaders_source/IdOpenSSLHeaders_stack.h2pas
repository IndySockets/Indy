{******************************************************************************}
{                                                                              }
{            Indy (Internet Direct) - Internet Protocols Simplified            }
{                                                                              }
{            https://www.indyproject.org/                                      }
{            https://gitter.im/IndySockets/Indy                                }
{                                                                              }
{******************************************************************************}
{                                                                              }
{  This file is part of the Indy (Internet Direct) project, and is offered     }
{  under the dual-licensing agreement described on the Indy website.           }
{  (https://www.indyproject.org/license/)                                      }
{                                                                              }
{  Copyright:                                                                  }
{   (c) 1993-2020, Chad Z. Hower and the Indy Pit Crew. All rights reserved.   }
{                                                                              }
{******************************************************************************}
{                                                                              }
{                                                                              }
{******************************************************************************}
unit IdOpenSSLHeaders_stack;

interface

uses
    IdCTypes,
    IdGlobal,
    IdSSLOpenSSLConsts;


{
  Automatically converted by H2Pas 1.0.0 from stack.h
  The following command line parameters were used:
  -p
  -t
    stack.h
}

 {
   * Copyright 1995-2017 The OpenSSL Project Authors. All Rights Reserved.
   *
   * Licensed under the OpenSSL license (the "License").  You may not use
   * this file except in compliance with the License.  You can obtain a copy
   * in the file LICENSE in the source distribution or at
   * https://www.openssl.org/source/license.html
    }

  type
  POPENSSL_STACK  = pointer;

  TOPENSSL_sk_compfunc = function (_para1:pointer; _para2:pointer):longint;cdecl;
  TOPENSSL_sk_freefunc = procedure (_para1:pointer);cdecl;
  TOPENSSL_sk_copyfunc = function (_para1:pointer):pointer;cdecl;

  function OPENSSL_sk_num(_para1:POPENSSL_STACK):longint; {introduced 1.1.0}
  function OPENSSL_sk_value(_para1:POPENSSL_STACK; _para2:longint):pointer; {introduced 1.1.0}
  function OPENSSL_sk_set(st:POPENSSL_STACK; i:longint; data:pointer):pointer; {introduced 1.1.0}
  function OPENSSL_sk_new(cmp:TOPENSSL_sk_compfunc):POPENSSL_STACK; {introduced 1.1.0}
  function OPENSSL_sk_new_null:POPENSSL_STACK; {introduced 1.1.0}
  function OPENSSL_sk_new_reserve(c:TOPENSSL_sk_compfunc; n:longint):POPENSSL_STACK; {introduced 1.1.0}
  function OPENSSL_sk_reserve(st:POPENSSL_STACK; n:longint):longint; {introduced 1.1.0}
  procedure OPENSSL_sk_free(_para1:POPENSSL_STACK); {introduced 1.1.0}
  procedure OPENSSL_sk_pop_free(st:POPENSSL_STACK; func:TOPENSSL_sk_freefunc); {introduced 1.1.0}
  function OPENSSL_sk_deep_copy(_para1:POPENSSL_STACK; c:TOPENSSL_sk_copyfunc; f:TOPENSSL_sk_freefunc):POPENSSL_STACK; {introduced 1.1.0}
  function OPENSSL_sk_insert(sk:POPENSSL_STACK; data:pointer; where:longint):longint; {introduced 1.1.0}
  function OPENSSL_sk_delete(st:POPENSSL_STACK; loc:longint):pointer; {introduced 1.1.0}
  function OPENSSL_sk_delete_ptr(st:POPENSSL_STACK; p:pointer):pointer; {introduced 1.1.0}
  function OPENSSL_sk_find(st:POPENSSL_STACK; data:pointer):longint; {introduced 1.1.0}
  function OPENSSL_sk_find_ex(st:POPENSSL_STACK; data:pointer):longint; {introduced 1.1.0}
  function OPENSSL_sk_push(st:POPENSSL_STACK; data:pointer):longint; {introduced 1.1.0}
  function OPENSSL_sk_unshift(st:POPENSSL_STACK; data:pointer):longint; {introduced 1.1.0}
  function OPENSSL_sk_shift(st:POPENSSL_STACK):pointer; {introduced 1.1.0}
  function OPENSSL_sk_pop(st:POPENSSL_STACK):pointer; {introduced 1.1.0}
  procedure OPENSSL_sk_zero(st:POPENSSL_STACK); {introduced 1.1.0}
  function OPENSSL_sk_set_cmp_func(sk:POPENSSL_STACK; cmp:TOPENSSL_sk_compfunc):TOPENSSL_sk_compfunc; {introduced 1.1.0}
  function OPENSSL_sk_dup(st:POPENSSL_STACK):POPENSSL_STACK; {introduced 1.1.0}
  procedure OPENSSL_sk_sort(st:POPENSSL_STACK); {introduced 1.1.0}
  function OPENSSL_sk_is_sorted(st:POPENSSL_STACK):longint; {introduced 1.1.0}

  function sk_num(_para1:POPENSSL_STACK):longint; {removed 1.1.0}
  function sk_value(_para1:POPENSSL_STACK; _para2:longint):pointer; {removed 1.1.0}
  function sk_set(st:POPENSSL_STACK; i:longint; data:pointer):pointer; {removed 1.1.0}
  function sk_new(cmp:TOPENSSL_sk_compfunc):POPENSSL_STACK; {removed 1.1.0}
  function sk_new_null:POPENSSL_STACK; {removed 1.1.0}
  function sk_new_reserve(c:TOPENSSL_sk_compfunc; n:longint):POPENSSL_STACK; {removed 1.0.0}
  function sk_reserve(st:POPENSSL_STACK; n:longint):longint; {removed 1.0.0}
  procedure sk_free(_para1:POPENSSL_STACK); {removed 1.1.0}
  procedure sk_pop_free(st:POPENSSL_STACK; func:TOPENSSL_sk_freefunc); {removed 1.1.0}
  function sk_deep_copy(_para1:POPENSSL_STACK; c:TOPENSSL_sk_copyfunc; f:TOPENSSL_sk_freefunc):POPENSSL_STACK; {removed 1.1.0}
  function sk_insert(sk:POPENSSL_STACK; data:pointer; where:longint):longint; {removed 1.1.0}
  function sk_delete(st:POPENSSL_STACK; loc:longint):pointer; {removed 1.1.0}
  function sk_delete_ptr(st:POPENSSL_STACK; p:pointer):pointer; {removed 1.1.0}
  function sk_find(st:POPENSSL_STACK; data:pointer):longint; {removed 1.1.0}
  function sk_find_ex(st:POPENSSL_STACK; data:pointer):longint; {removed 1.1.0}
  function sk_push(st:POPENSSL_STACK; data:pointer):longint; {removed 1.1.0}
  function sk_unshift(st:POPENSSL_STACK; data:pointer):longint; {removed 1.1.0}
  function sk_shift(st:POPENSSL_STACK):pointer; {removed 1.1.0}
  function sk_pop(st:POPENSSL_STACK):pointer; {removed 1.1.0}
  procedure sk_zero(st:POPENSSL_STACK); {removed 1.1.0}
  function sk_set_cmp_func(sk:POPENSSL_STACK; cmp:TOPENSSL_sk_compfunc):TOPENSSL_sk_compfunc; {removed 1.1.0}
  function sk_dup(st:POPENSSL_STACK):POPENSSL_STACK; {removed 1.1.0}
  procedure sk_sort(st:POPENSSL_STACK); {removed 1.1.0}
  function sk_is_sorted(st:POPENSSL_STACK):longint; {removed 1.1.0}

implementation

function sk_num(_para1:POPENSSL_STACK):longint;
begin
  Result := OPENSSL_sk_num(_para1);
end;

function sk_value(_para1:POPENSSL_STACK; _para2:longint):pointer;
begin
  Result := OPENSSL_sk_value(_para1,_para2);
end;

function sk_set(st:POPENSSL_STACK; i:longint; data:pointer):pointer;
begin
  Result := OPENSSL_sk_set(st,i,data);
end;

function sk_new(cmp:TOPENSSL_sk_compfunc):POPENSSL_STACK;
begin
  Result := OPENSSL_sk_new(cmp);
end;

function sk_new_null:POPENSSL_STACK;
begin
  Result := OPENSSL_sk_new_null;
end;

function sk_new_reserve(c:TOPENSSL_sk_compfunc; n:longint):POPENSSL_STACK;
begin
  Result := OPENSSL_sk_new_reserve(c,n);
end;

function sk_reserve(st:POPENSSL_STACK; n:longint):longint;
begin
  Result := OPENSSL_sk_reserve(st,n);
end;

procedure sk_free(_para1:POPENSSL_STACK);
begin
  OPENSSL_sk_free(_para1);
end;

procedure sk_pop_free(st:POPENSSL_STACK; func:TOPENSSL_sk_freefunc);
begin
  OPENSSL_sk_pop_free(st, func);
end;

function sk_deep_copy(_para1:POPENSSL_STACK; c:TOPENSSL_sk_copyfunc; f:TOPENSSL_sk_freefunc):POPENSSL_STACK;
begin
  Result := OPENSSL_sk_deep_copy(_para1,c,f);
end;

function sk_insert(sk:POPENSSL_STACK; data:pointer; where:longint):longint;
begin
  Result := OPENSSL_sk_insert(sk,data,where);
end;

function sk_delete(st:POPENSSL_STACK; loc:longint):pointer;
begin
  Result := OPENSSL_sk_delete(st,loc);
end;

function sk_delete_ptr(st:POPENSSL_STACK; p:pointer):pointer;
begin
  Result := OPENSSL_sk_delete_ptr(st,p);
end;

function sk_find(st:POPENSSL_STACK; data:pointer):longint;
begin
  Result := OPENSSL_sk_find(st,data);
end;

function sk_find_ex(st:POPENSSL_STACK; data:pointer):longint;
begin
  Result := OPENSSL_sk_find_ex(st,data);
end;

function sk_push(st:POPENSSL_STACK; data:pointer):longint;
begin
  Result := OPENSSL_sk_push(st,data);
end;

function sk_unshift(st:POPENSSL_STACK; data:pointer):longint;
begin
  Result := OPENSSL_sk_unshift(st,data);
end;

function sk_shift(st:POPENSSL_STACK):pointer;
begin
  Result := OPENSSL_sk_shift(st);
end;

function sk_pop(st:POPENSSL_STACK):pointer;
begin
  Result := OPENSSL_sk_pop(st);
end;

procedure sk_zero(st:POPENSSL_STACK);
begin
  OPENSSL_sk_zero(st);
end;

function sk_set_cmp_func(sk:POPENSSL_STACK; cmp:TOPENSSL_sk_compfunc):TOPENSSL_sk_compfunc;
begin
  Result := OPENSSL_sk_set_cmp_func(sk,cmp);
end;

function sk_dup(st:POPENSSL_STACK):POPENSSL_STACK;
begin
  Result := OPENSSL_sk_dup(st);
end;

procedure sk_sort(st:POPENSSL_STACK);
begin
  OPENSSL_sk_sort(st);
end;

function sk_is_sorted(st:POPENSSL_STACK):longint;
begin
  Result := OPENSSL_sk_is_sorted(st);
end;



end.
