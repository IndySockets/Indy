{******************************************************************************}
{                                                                              }
{            Indy (Internet Direct) - Internet Protocols Simplified            }
{                                                                              }
{            https://www.indyproject.org/                                      }
{            https://gitter.im/IndySockets/Indy                                }
{                                                                              }
{******************************************************************************}
{                                                                              }
{  This file is part of the Indy (Internet Direct) project, and is offered     }
{  under the dual-licensing agreement described on the Indy website.           }
{  (https://www.indyproject.org/license/)                                      }
{                                                                              }
{  Copyright:                                                                  }
{   (c) 1993-2020, Chad Z. Hower and the Indy Pit Crew. All rights reserved.   }
{                                                                              }
{******************************************************************************}
{                                                                              }
{                                                                              }
{******************************************************************************}


unit IdOpenSSLHeaders_des;

interface


uses
  IdCTypes,
  IdGlobal,
  IdSSLOpenSSLConsts;

{
  Automatically converted by H2Pas 1.0.0 from des.h
  The following command line parameters were used:
    des.h
}

    Type
    DES_LONG = type cardinal;
    Pconst_DES_cblock  = ^const_DES_cblock;
    PDES_cblock  = ^DES_cblock;
    PDES_key_schedule  = ^DES_key_schedule;
    PDES_LONG  = ^DES_LONG;


     DES_cblock = array[0..7] of byte;
    { const  }
      const_DES_cblock = array[0..7] of byte;
    {
     * With "const", gcc 2.8.1 on Solaris thinks that DES_cblock * and
     * const_DES_cblock * are incompatible pointer types.
      }
    {
             * make sure things are correct size on machines with 8 byte longs
              }

      DES_ks = record
          ks : array[0..15] of record
              case longint of
                0 : ( cblock : DES_cblock );
                1 : ( deslong : array[0..1] of DES_LONG );
              end;
        end;
      DES_key_schedule = DES_ks;

var
  DES_check_key : longint;


    const
      DES_ENCRYPT = 1;      
      DES_DECRYPT = 0;      
      DES_CBC_MODE = 0;      
      DES_PCBC_MODE = 1;      

    procedure DES_ecb2_encrypt(input:Pconst_DES_cblock; output:PDES_cblock; ks1:PDES_key_schedule; ks2:PDES_key_schedule; enc:longint);  {removed 1.0.0}
    procedure DES_ede2_cbc_encrypt(input:Pbyte; output:Pbyte; length:longint; ks1:PDES_key_schedule; ks2:PDES_key_schedule; ivec:PDES_cblock; enc:longint);  {removed 1.0.0}
    procedure DES_ede2_cfb64_encrypt(in_:Pbyte; out_:Pbyte; length:longint; ks1:PDES_key_schedule; ks2:PDES_key_schedule; ivec:PDES_cblock; num:Plongint; enc:longint);  {removed 1.0.0}
    procedure DES_ede2_ofb64_encrypt(in_:Pbyte; out_:Pbyte; length:longint; ks1:PDES_key_schedule; ks2:PDES_key_schedule; ivec:PDES_cblock; num:Plongint);  {removed 1.0.0}


(* Const before type ignored *)
    function DES_options: PIdAnsiChar;

    procedure DES_ecb3_encrypt(input:Pconst_DES_cblock; output:PDES_cblock; ks1:PDES_key_schedule; ks2:PDES_key_schedule; ks3:PDES_key_schedule; enc:longint);

(* Const before type ignored *)
    function DES_cbc_cksum(input:Pbyte; output:PDES_cblock; length:longint; schedule:PDES_key_schedule; ivec:Pconst_DES_cblock):DES_LONG;

    { DES_cbc_encrypt does not update the IV!  Use DES_ncbc_encrypt instead.  }
(* Const before type ignored *)
    procedure DES_cbc_encrypt(input:Pbyte; output:Pbyte; length:longint; schedule:PDES_key_schedule; ivec:PDES_cblock; enc:longint);

(* Const before type ignored *)
    procedure DES_ncbc_encrypt(input:Pbyte; output:Pbyte; length:longint; schedule:PDES_key_schedule; ivec:PDES_cblock; enc:longint);

(* Const before type ignored *)
    procedure DES_xcbc_encrypt(input:Pbyte; output:Pbyte; length:longint; schedule:PDES_key_schedule; ivec:PDES_cblock; inw:Pconst_DES_cblock; outw:Pconst_DES_cblock; enc:longint);

(* Const before type ignored *)
    procedure DES_cfb_encrypt(in_:Pbyte; out_:Pbyte; numbits:longint; length:longint; schedule:PDES_key_schedule; ivec:PDES_cblock; enc:longint);

    procedure DES_ecb_encrypt(input:Pconst_DES_cblock; output:PDES_cblock; ks:PDES_key_schedule; enc:longint); 
   {
     * This is the DES encryption function that gets called by just about every
     * other DES routine in the library.  You should not use this function except
     * to implement 'modes' of DES.  I say this because the functions that call
     * this routine do the conversion from 'char *' to long, and this needs to be
     * done to make sure 'non-aligned' memory access do not occur.  The
     * characters are loaded 'little endian'. Data is a pointer to 2 unsigned
     * long's and ks is the DES_key_schedule to use.  enc, is non zero specifies
     * encryption, zero if decryption.
      }
    procedure DES_encrypt1(data:PDES_LONG; ks:PDES_key_schedule; enc:longint);

    {
     * This functions is the same as DES_encrypt1() except that the DES initial
     * permutation (IP) and final permutation (FP) have been left out.  As for
     * DES_encrypt1(), you should not use this function. It is used by the
     * routines in the library that implement triple DES. IP() DES_encrypt2()
     * DES_encrypt2() DES_encrypt2() FP() is the same as DES_encrypt1()
     * DES_encrypt1() DES_encrypt1() except faster :-).
      }
    procedure DES_encrypt2(data:PDES_LONG; ks:PDES_key_schedule; enc:longint);

    procedure DES_encrypt3(data:PDES_LONG; ks1:PDES_key_schedule; ks2:PDES_key_schedule; ks3:PDES_key_schedule);

    procedure DES_decrypt3(data:PDES_LONG; ks1:PDES_key_schedule; ks2:PDES_key_schedule; ks3:PDES_key_schedule);

(* Const before type ignored *)
    procedure DES_ede3_cbc_encrypt(input:Pbyte; output:Pbyte; length:longint; ks1:PDES_key_schedule; ks2:PDES_key_schedule; ks3:PDES_key_schedule; ivec:PDES_cblock; enc:longint);

(* Const before type ignored *)
    procedure DES_ede3_cfb64_encrypt(in_:Pbyte; out_:Pbyte; length:longint; ks1:PDES_key_schedule; ks2:PDES_key_schedule; ks3:PDES_key_schedule; ivec:PDES_cblock; num:Plongint; enc:longint);

(* Const before type ignored *)
    procedure DES_ede3_cfb_encrypt(in_:Pbyte; out_:Pbyte; numbits:longint; length:longint; ks1:PDES_key_schedule; ks2:PDES_key_schedule; ks3:PDES_key_schedule; ivec:PDES_cblock; enc:longint);

(* Const before type ignored *)
    procedure DES_ede3_ofb64_encrypt(in_:Pbyte; out_:Pbyte; length:longint; ks1:PDES_key_schedule; ks2:PDES_key_schedule; ks3:PDES_key_schedule; ivec:PDES_cblock; num:Plongint);

(* Const before type ignored *)
(* Const before type ignored *)
    function DES_fcrypt(buf:PIdAnsiChar; salt:PIdAnsiChar; ret:PIdAnsiChar): PIdAnsiChar;

(* Const before type ignored *)
(* Const before type ignored *)
    function DES_crypt(buf:PIdAnsiChar; salt:PIdAnsiChar): PIdAnsiChar;

(* Const before type ignored *)
    procedure DES_ofb_encrypt(in_:Pbyte; out_:Pbyte; numbits:longint; length:longint; schedule:PDES_key_schedule; ivec:PDES_cblock);

(* Const before type ignored *)
    procedure DES_pcbc_encrypt(input:Pbyte; output:Pbyte; length:longint; schedule:PDES_key_schedule; ivec:PDES_cblock; enc:longint);

(* Const before type ignored *)
    function DES_quad_cksum(input:Pbyte; output:PDES_cblock; length:longint; out_count:longint; seed:PDES_cblock):DES_LONG;

    function DES_random_key(ret:PDES_cblock):longint;

    procedure DES_set_odd_parity(key:PDES_cblock);

    function DES_check_key_parity(key:Pconst_DES_cblock):longint;

    function DES_is_weak_key(key:Pconst_DES_cblock):longint;

    {
     * DES_set_key (= set_key = DES_key_sched = key_sched) calls
     * DES_set_key_checked if global variable DES_check_key is set,
     * DES_set_key_unchecked otherwise.
      }
    function DES_set_key(key:Pconst_DES_cblock; var schedule: DES_key_schedule):longint;

    function DES_key_sched(key:Pconst_DES_cblock; schedule:PDES_key_schedule):longint;

    function DES_set_key_checked(key:Pconst_DES_cblock; schedule:PDES_key_schedule):longint;

    procedure DES_set_key_unchecked(key:Pconst_DES_cblock; schedule:PDES_key_schedule);

(* Const before type ignored *)
    procedure DES_string_to_key(str:PIdAnsiChar; key:PDES_cblock);

(* Const before type ignored *)
    procedure DES_string_to_2keys(str:PIdAnsiChar; key1:PDES_cblock; key2:PDES_cblock);

(* Const before type ignored *)
    procedure DES_cfb64_encrypt(in_:Pbyte; out_:Pbyte; length:longint; schedule:PDES_key_schedule; ivec:PDES_cblock; num:Plongint; enc:longint);

(* Const before type ignored *)
    procedure DES_ofb64_encrypt(in_:Pbyte; out_:Pbyte; length:longint; schedule:PDES_key_schedule; ivec:PDES_cblock; num:Plongint);

    procedure DES_fixup_key_parity(key: PDES_cblock); {removed 1.0.0}

implementation

    procedure DES_ecb2_encrypt(input:Pconst_DES_cblock; output:PDES_cblock; ks1: PDES_key_schedule; ks2: PDES_key_schedule; enc: longint);
    begin
      DES_ecb3_encrypt(input,output,ks1,ks2,ks1,enc);
    end;

    procedure DES_ede2_cbc_encrypt(input:Pbyte; output:Pbyte; length: longint; ks1: PDES_key_schedule; ks2: PDES_key_schedule; ivec: PDES_cblock; enc: longint);
    begin
      DES_ede3_cbc_encrypt(input,output,length,ks1,ks2,ks1,ivec,enc);
    end;

    procedure DES_ede2_cfb64_encrypt(in_: Pbyte; out_: Pbyte; length: longint; ks1: PDES_key_schedule; ks2: PDES_key_schedule; ivec: PDES_cblock; num: Plongint; enc: longint);
    begin
      DES_ede3_cfb64_encrypt(in_,out_,length,ks1,ks2,ks1,ivec,num,enc);
    end;

    procedure DES_ede2_ofb64_encrypt(in_: Pbyte; out_: Pbyte; length: longint; ks1: PDES_key_schedule; ks2: PDES_key_schedule; ivec: PDES_cblock; num: Plongint);
    begin
      DES_ede3_ofb64_encrypt(in_,out_,length,ks1,ks2,ks1,ivec,num);
    end;

    procedure DES_fixup_key_parity(key:PDES_cblock);
    begin
      DES_set_odd_parity(key);
   end;


end.
